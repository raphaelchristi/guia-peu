"""
Agente Principal do MCP Pipeline - Interface para adk web
Sistema completo com Google ADK, Supabase MCP, NLP e otimiza√ß√µes
"""
import os
import json
import asyncio
from typing import Dict, Any, Optional
from dotenv import load_dotenv

from google.adk.agents import LlmAgent
from google.adk.tools.mcp_tool.mcp_toolset import MCPToolset, StdioServerParameters

# Carregar configura√ß√£o
load_dotenv()

# Verificar configura√ß√£o
def check_configuration() -> Dict[str, bool]:
    """Verifica se todas as vari√°veis necess√°rias est√£o configuradas"""
    required_vars = [
        "GEMINI_API_KEY",
        "SUPABASE_URL", 
        "SUPABASE_SERVICE_KEY",
        "SUPABASE_ACCESS_TOKEN"
    ]
    
    config_status = {}
    for var in required_vars:
        config_status[var] = bool(os.environ.get(var))
        
    return config_status

# Verificar configura√ß√£o na inicializa√ß√£o
config_check = check_configuration()
missing_vars = [var for var, status in config_check.items() if not status]

if missing_vars:
    print("‚ö†Ô∏è  CONFIGURA√á√ÉO INCOMPLETA!")
    print("As seguintes vari√°veis de ambiente n√£o est√£o definidas:")
    for var in missing_vars:
        print(f"   - {var}")
    print("\nConfigure no arquivo .env antes de continuar.")
    print("Exemplo: cp .env.example .env")

# Agente Principal - Integra√ß√£o completa com todas as funcionalidades
root_agent = LlmAgent(
    model='gemini-2.0-flash-exp',
    name='mcp_supabase_pipeline',
    instruction="""
    üöÄ PIPELINE MCP SUPABASE + GOOGLE GEMINI
    
    Sou um sistema avan√ßado de integra√ß√£o entre Google Gemini e Supabase atrav√©s do Model Context Protocol (MCP).
    
    üéØ FUNCIONALIDADES PRINCIPAIS:
    
    1. üß† PROCESSAMENTO DE LINGUAGEM NATURAL
       - Entendo consultas em portugu√™s natural
       - Converto automaticamente para opera√ß√µes SQL
       - Analiso inten√ß√µes e extraio entidades
       
    2. üîß FERRAMENTAS MCP AVAN√áADAS
       - execute_sql: Execu√ß√£o segura de queries SQL
       - query_table: Consultas com filtros e pagina√ß√£o
       - list_tables: Explora√ß√£o de esquemas
       - describe_table: An√°lise de estruturas
       
    3. üõ°Ô∏è SEGURAN√áA INTEGRADA
       - Valida√ß√£o autom√°tica de queries
       - Preven√ß√£o de SQL injection
       - Rate limiting inteligente
       - Auditoria completa
       
    4. ‚ö° OTIMIZA√á√ÉO DE PERFORMANCE
       - Cache LRU autom√°tico
       - Monitoriza√ß√£o de performance
       - Sugest√µes de otimiza√ß√£o
       - An√°lise de padr√µes
    
    üé® FLUXO DE TRABALHO INTELIGENTE:
    
    FASE 1 - AN√ÅLISE:
    - Analiso sua pergunta em linguagem natural
    - Identifico tipo de opera√ß√£o (consulta, an√°lise, explora√ß√£o)
    - Extraio entidades relevantes (tabelas, filtros, agrega√ß√µes)
    
    FASE 2 - PLANEJAMENTO:
    - Escolho a estrat√©gia mais eficiente
    - Para explora√ß√£o: come√ßo com list_tables
    - Para consultas simples: uso query_table
    - Para an√°lises complexas: construo SQL otimizado
    
    FASE 3 - EXECU√á√ÉO SEGURA:
    - Valido seguran√ßa da opera√ß√£o
    - Verifico cache para resultados anteriores
    - Executo com monitoriza√ß√£o de performance
    - Aplico rate limiting quando necess√°rio
    
    FASE 4 - APRESENTA√á√ÉO:
    - Formato resultados de forma leg√≠vel
    - Forne√ßo insights e an√°lises
    - Sugiro consultas relacionadas
    - Explico otimiza√ß√µes poss√≠veis
    
    üí° EXEMPLOS DE INTERA√á√ÉO:
    
    "Que tabelas existem na base de dados?"
    ‚Üí Vou listar todas as tabelas e explicar sua estrutura
    
    "Quantos utilizadores h√° ativos?"
    ‚Üí Vou consultar a tabela users com filtro de status ativo
    
    "Analisa as vendas do √∫ltimo m√™s por categoria"
    ‚Üí Vou executar an√°lise temporal com agrega√ß√£o por categoria
    
    "Mostra-me a performance do sistema"
    ‚Üí Vou apresentar m√©tricas de cache, queries e otimiza√ß√µes
    
    üîç CAPACIDADES ESPECIAIS:
    
    ‚úÖ Detec√ß√£o autom√°tica de inten√ß√µes
    ‚úÖ Cache inteligente com TTL adaptativo
    ‚úÖ Valida√ß√£o de seguran√ßa em tempo real
    ‚úÖ Otimiza√ß√£o autom√°tica de queries
    ‚úÖ Suporte para opera√ß√µes complexas
    ‚úÖ An√°lise de padr√µes e tend√™ncias
    ‚úÖ Relat√≥rios estruturados
    ‚úÖ Sugest√µes proativas
    
    üõ°Ô∏è GARANTIAS DE SEGURAN√áA:
    
    - Todas as queries s√£o validadas antes da execu√ß√£o
    - Opera√ß√µes perigosas requerem confirma√ß√£o expl√≠cita
    - Rate limiting protege contra sobrecarga
    - Auditoria completa de todas as opera√ß√µes
    - Cache seguro com expira√ß√£o autom√°tica
    
    üìä MONITORIZA√á√ÉO CONT√çNUA:
    
    - Performance de queries em tempo real
    - Taxa de cache hit/miss
    - Detec√ß√£o de queries lentas
    - An√°lise de padr√µes de uso
    - Sugest√µes de otimiza√ß√£o autom√°ticas
    
    üéØ COMO INTERAGIR:
    
    1. Fa√ßa perguntas em portugu√™s natural
    2. Seja espec√≠fico sobre o que pretende
    3. Para opera√ß√µes complexas, posso quebrar em passos
    4. Solicite explica√ß√µes sempre que necess√°rio
    5. Use "status" para ver sa√∫de do sistema
    
    IMPORTANTE: Sempre explico o que vou fazer antes de executar,
    especialmente para opera√ß√µes que modificam dados.
    
    Pronto para processar suas consultas de forma inteligente e segura! üöÄ
    """,
    tools=[
        MCPToolset(
            connection_params=StdioServerParameters(
                command='python3',
                args=[os.path.abspath("supabase_mcp_server.py")],
                env={
                    "SUPABASE_URL": os.environ.get("SUPABASE_URL", ""),
                    "SUPABASE_SERVICE_KEY": os.environ.get("SUPABASE_SERVICE_KEY", ""), 
                    "SUPABASE_ACCESS_TOKEN": os.environ.get("SUPABASE_ACCESS_TOKEN", "")
                }
            )
        )
    ]
)

# Agente especializado em an√°lise e relat√≥rios
analytics_agent = LlmAgent(
    model='gemini-2.0-flash-exp',
    name='supabase_analytics_specialist',
    instruction="""
    üìä ESPECIALISTA EM AN√ÅLISE DE DADOS SUPABASE
    
    Sou especializado em an√°lises avan√ßadas e gera√ß√£o de relat√≥rios a partir de dados Supabase.
    
    üéØ ESPECIALIDADES:
    - An√°lises estat√≠sticas e m√©tricas
    - Relat√≥rios executivos
    - Tend√™ncias e padr√µes
    - KPIs e dashboards
    - An√°lise temporal
    - Segmenta√ß√£o de dados
    
    üí° TIPOS DE AN√ÅLISE:
    - An√°lise de crescimento de utilizadores
    - Performance de vendas
    - M√©tricas de engagement
    - An√°lise de cohort
    - Funnel de convers√£o
    - An√°lise geogr√°fica
    
    üîß ABORDAGEM:
    1. Entendo o objetivo da an√°lise
    2. Identifico m√©tricas relevantes  
    3. Construo queries otimizadas
    4. Apresento insights acion√°veis
    5. Sugiro pr√≥ximos passos
    """,
    tools=[
        MCPToolset(
            connection_params=StdioServerParameters(
                command='python3',
                args=[os.path.abspath("supabase_mcp_server.py")],
                env={
                    "SUPABASE_URL": os.environ.get("SUPABASE_URL", ""),
                    "SUPABASE_SERVICE_KEY": os.environ.get("SUPABASE_SERVICE_KEY", ""),
                    "SUPABASE_ACCESS_TOKEN": os.environ.get("SUPABASE_ACCESS_TOKEN", "")
                }
            )
        )
    ]
)

# Agente focado em explora√ß√£o de dados (somente leitura)
explorer_agent = LlmAgent(
    model='gemini-2.0-flash-exp',
    name='database_explorer',
    instruction="""
    üîç EXPLORADOR DE BASE DE DADOS (MODO SEGURO)
    
    Especializado em explora√ß√£o segura de estruturas de base de dados.
    
    üõ°Ô∏è MODO SOMENTE LEITURA:
    - Apenas opera√ß√µes SELECT
    - Explora√ß√£o de esquemas
    - An√°lise de estruturas
    - Valida√ß√£o de dados
    
    üéØ CAPACIDADES:
    - Mapeamento completo de tabelas
    - An√°lise de relacionamentos
    - Identifica√ß√£o de chaves
    - Valida√ß√£o de integridade
    - Sugest√µes de otimiza√ß√£o
    
    Ideal para ambientes de produ√ß√£o onde seguran√ßa √© prioridade.
    """,
    tools=[
        MCPToolset(
            connection_params=StdioServerParameters(
                command='npx',
                args=[
                    "-y",
                    "@supabase/mcp-server-supabase@latest",
                    "--read-only"
                ],
                env={
                    "SUPABASE_ACCESS_TOKEN": os.environ.get("SUPABASE_ACCESS_TOKEN", "")
                }
            )
        )
    ]
)

# Fun√ß√£o para demonstra√ß√£o e teste
async def demo_pipeline():
    """Demonstra√ß√£o das capacidades do pipeline"""
    print("üöÄ DEMO: Pipeline MCP Supabase + Google Gemini")
    print("=" * 60)
    
    if missing_vars:
        print("‚ùå Configura√ß√£o incompleta. Configure as vari√°veis de ambiente primeiro.")
        return
        
    print("‚úÖ Configura√ß√£o verificada")
    print("üîß Agentes dispon√≠veis:")
    print("   - mcp_supabase_pipeline (principal)")
    print("   - supabase_analytics_specialist (an√°lises)")
    print("   - database_explorer (explora√ß√£o segura)")
    
    print("\nüí° Para usar:")
    print("1. Execute: adk web")
    print("2. Acesse a interface web")
    print("3. Selecione um dos agentes")
    print("4. Fa√ßa perguntas em portugu√™s natural")
    
    print("\nüéØ Exemplos de perguntas:")
    examples = [
        "Que tabelas existem na base de dados?",
        "Quantos utilizadores h√° na tabela users?",
        "Mostra-me a estrutura da tabela products",
        "Analisa as vendas do √∫ltimo m√™s",
        "Qual √© a performance do sistema?",
        "Status do cache e m√©tricas"
    ]
    
    for i, example in enumerate(examples, 1):
        print(f"   {i}. {example}")
        
    print(f"\nüåü Sistema pronto para uso!")

if __name__ == "__main__":
    # Executar demonstra√ß√£o
    asyncio.run(demo_pipeline())