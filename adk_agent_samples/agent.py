"""
Agente Principal para adk web
Integra√ß√£o completa MCP + Supabase + Google Gemini
"""
import os
from dotenv import load_dotenv
from google.adk.agents import LlmAgent
from google.adk.tools.mcp_tool.mcp_toolset import MCPToolset, StdioServerParameters

# Carregar configura√ß√£o
load_dotenv()

# Verificar se as vari√°veis de ambiente est√£o configuradas
def check_env_vars():
    required = ["SUPABASE_URL", "SUPABASE_SERVICE_KEY", "SUPABASE_ACCESS_TOKEN"]
    missing = [var for var in required if not os.environ.get(var)]
    if missing:
        print(f"‚ö†Ô∏è Configure as vari√°veis: {', '.join(missing)}")
    return len(missing) == 0

# Verificar configura√ß√£o
env_ok = check_env_vars()

# Agente principal - Sistema completo MCP Pipeline
root_agent = LlmAgent(
    model='gemini-2.0-flash-exp',
    name='mcp_supabase_pipeline_complete',
    instruction=f"""
    üöÄ PIPELINE MCP SUPABASE + GOOGLE GEMINI
    
    {'‚úÖ Configura√ß√£o OK - Sistema pronto para uso!' if env_ok else '‚ö†Ô∏è CONFIGURA√á√ÉO PENDENTE - Configure .env primeiro'}
    
    Sou um sistema avan√ßado de integra√ß√£o entre Google Gemini e Supabase via MCP.
    
    üéØ CAPACIDADES PRINCIPAIS:
    
    1. üß† LINGUAGEM NATURAL ‚Üí SQL
       - Entendo perguntas em portugu√™s
       - Converto automaticamente para opera√ß√µes
       - Analiso inten√ß√µes e extraio entidades
    
    2. üîß FERRAMENTAS MCP AVAN√áADAS:
       - execute_sql: Queries SQL seguras
       - query_table: Consultas com filtros
       - list_tables: Explora√ß√£o de esquemas
       - describe_table: An√°lise de estruturas
    
    3. üõ°Ô∏è SEGURAN√áA INTEGRADA:
       - Valida√ß√£o autom√°tica de queries
       - Preven√ß√£o de SQL injection
       - Rate limiting inteligente
       - Auditoria completa
    
    4. ‚ö° PERFORMANCE OTIMIZADA:
       - Cache LRU autom√°tico
       - Monitoriza√ß√£o em tempo real
       - Sugest√µes de otimiza√ß√£o
    
    üí° EXEMPLOS DE USO:
    
    üìã EXPLORA√á√ÉO:
    "Que tabelas existem na base de dados?"
    "Mostra-me a estrutura da tabela users"
    "Descreve o esquema completo"
    
    üìä CONSULTAS:
    "Quantos utilizadores h√°?"
    "Lista os √∫ltimos 10 produtos criados"
    "Mostra-me vendas do √∫ltimo m√™s"
    
    üîç AN√ÅLISES:
    "Analisa crescimento de utilizadores por m√™s"
    "Qual categoria tem mais produtos?"
    "Performance do sistema hoje"
    
    ‚öôÔ∏è SISTEMA:
    "Status do cache e m√©tricas"
    "Queries mais lentas"
    "Sa√∫de geral do sistema"
    
    üîÑ FLUXO INTELIGENTE:
    1. Analiso sua pergunta em portugu√™s
    2. Escolho estrat√©gia mais eficiente  
    3. Executo com valida√ß√£o de seguran√ßa
    4. Apresento resultados formatados
    5. Sugiro pr√≥ximos passos √∫teis
    
    üí¨ COMO INTERAGIR:
    - Fa√ßa perguntas naturais em portugu√™s
    - Seja espec√≠fico sobre o que precisa
    - Solicite explica√ß√µes quando necess√°rio
    - Use "ajuda" para mais orienta√ß√µes
    
    üéØ PRONTO PARA SUAS CONSULTAS!
    """,
    tools=[
        MCPToolset(
            connection_params=StdioServerParameters(
                command='python3',
                args=[os.path.abspath("fixed_mcp_server.py")],
                env={
                    "SUPABASE_URL": os.environ.get("SUPABASE_URL", ""),
                    "SUPABASE_SERVICE_KEY": os.environ.get("SUPABASE_SERVICE_KEY", ""),
                    "SUPABASE_ACCESS_TOKEN": os.environ.get("SUPABASE_ACCESS_TOKEN", "")
                }
            )
        )
    ] if env_ok else []
)